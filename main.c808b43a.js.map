{"version":3,"sources":["js/BgService.js","js/providers.js","js/binder.js","js/main.js"],"names":["BgService","provider","pics","next","Promise","resolve","reject","length","fetch","then","data","push","pop","flickr","ub","adapt","p","url","farm","server","id","secret","title","author","ownername","link","replace","createFetch","perPage","getRandomInt","photos","pages","photo","map","pexels","src","large2x","photographer","Math","floor","total_results","Authorization","pixabay","webformatURL","user","pageURL","totalHits","hits","apiUrl","processData","headers","resp","json","max","min","random","refresh","model","bindingMap","prop","set","el","innerTextById","document","getElementById","v","innerText","bySelector","selector","querySelector","byElement","d","m","href","onclick","body","style","backgroundImage","bgService","preload","Image","onload","_"],"mappings":"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","file":"main.c808b43a.js","sourceRoot":"..\\app","sourcesContent":["// handles fetching and caching images from a provider\r\nexport default function BgService(provider) {\r\n    const pics = [];\r\n\r\n    function next() {\r\n        return new Promise((resolve, reject) => {\r\n            if (pics.length === 0) {\r\n                provider\r\n                    .fetch()\r\n                    .then(data => {\r\n                        pics.push(...data);\r\n                        resolve(pics.pop());\r\n                    }, reject);\r\n            } else {\r\n                resolve(pics.pop());\r\n            }\r\n        });\r\n    }\r\n\r\n    return {\r\n        next: next\r\n    }\r\n}\r\n","export function flickr() {\r\n    let ub = 5,\r\n        perPage = 30,\r\n        apiUrl = () => `https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&api_key=b349c4870ef592bcb66e39a997645a9b&format=json&nojsoncallback=1&per_page=${perPage}&page=${getRandomInt(ub)}&extras=owner_name`,\r\n        photoUrl = ({ farm, server, id, secret }) => `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}_b.jpg`,\r\n        adapt = p => {\r\n            return {\r\n                url: photoUrl(p),\r\n                title: p.title,\r\n                author: p.ownername,\r\n                link: `https://www.flickr.com/photos/${p.ownername}/${p.id}/`.replace(' ', '')\r\n            }\r\n        }\r\n\r\n    return {\r\n        fetch: createFetch(apiUrl, data => {\r\n            ub = data.photos.pages - 1;\r\n            return data.photos.photo.map(adapt);\r\n        })\r\n    }\r\n}\r\n\r\nexport function pexels() {\r\n    let ub = 5,\r\n        perPage = 30,\r\n        apiUrl = () => `https://api.pexels.com/v1/search?query=HD+wallpaper&per_page=${perPage}&page=${getRandomInt(ub, 1)}`,\r\n        adapt = p => {\r\n            return {\r\n                url: p.src.large2x,\r\n                title: null,\r\n                author: p.photographer + ' provided by Pexels',\r\n                link: p.url\r\n            }\r\n        };\r\n\r\n    return {\r\n        fetch: createFetch(apiUrl, data => {\r\n                ub = Math.floor((data.total_results / perPage)) - 1;\r\n                return data.photos.map(adapt);\r\n            },\r\n            { Authorization: '563492ad6f9170000100000160e6632c359c40ac95d0baa76ec59de9' }\r\n        )\r\n    }\r\n}\r\n\r\nexport function pixabay() {\r\n    let ub = 5,\r\n        perPage = 30, // min 3 -> api requirement\r\n        apiUrl = () => `https://pixabay.com/api/?key=8553434-1c384dc24960b57b19ec457d7&image_type=photo&orientation=horizontal&editors_choice=true&safesearch=true&per_page=${perPage}&page=${getRandomInt(ub, 1)}`,\r\n        adapt = p => {\r\n            return {\r\n                url: p.webformatURL.replace('_640.', '_960.'),\r\n                title: null,\r\n                author: p.user,\r\n                link: p.pageURL\r\n            }\r\n        };\r\n\r\n    return {\r\n        fetch: createFetch(apiUrl, data => {\r\n            ub = Math.floor((data.totalHits / perPage)) - 1;\r\n            return data.hits.map(adapt);\r\n        })\r\n    }\r\n}\r\n\r\n// creates the fetch function for a provider\r\nfunction createFetch(apiUrl, processData, headers) {\r\n    return () => {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(apiUrl(), { headers: headers })\r\n                .then(resp => resp.json(), reject)\r\n                .then(data => resolve(processData(data)), reject)\r\n        });\r\n    }\r\n}\r\n\r\nfunction getRandomInt(max, min=0) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n","// handle page binding\r\nexport function refresh(model, bindingMap) {\r\n    for (let prop in bindingMap) {\r\n        if (bindingMap[prop].set && typeof(bindingMap[prop].set) === 'function' && bindingMap[prop].el && model[prop]) {\r\n            bindingMap[prop].set(bindingMap[prop].el, model[prop]);\r\n        }\r\n    }\r\n}\r\n\r\n//\r\n// helpers\r\n//\r\nexport function innerTextById(id) {\r\n    return {\r\n        el: document.getElementById(id),\r\n        set: (el, v) => el.innerText = v\r\n    }\r\n}\r\n\r\nexport function bySelector(selector, set) {\r\n    return {\r\n        el: document.querySelector(selector),\r\n        set\r\n    }\r\n}\r\n\r\nexport function byElement(el, set) {\r\n    return {\r\n        el,\r\n        set\r\n    }\r\n}\r\n","import BgService from './BgService';\r\nimport { pexels } from './providers';\r\nimport { refresh, innerTextById, bySelector, byElement } from './binder'\r\n\r\nconst d = {\r\n    author: 'Snapwire provided by Pexels',\r\n    link: 'https://images.pexels.com/photos/292442/pexels-photo-292442.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\r\n    next,\r\n    title: '',\r\n    url: '/img/bg.jpg'\r\n},\r\nm = {\r\n    author: innerTextById('author'),\r\n    link: bySelector('#link', (el, v) => el.href = v),\r\n    next: bySelector('#next', (el, v) => el.onclick = v),\r\n    title: innerTextById('title'),\r\n    url: byElement(document.body, (el, v) => el.style.backgroundImage = `url(${v})`)\r\n},\r\nbgService = new BgService(new pexels());\r\n\r\n// init\r\nrefresh(d, m);\r\n\r\n// click handler for the play button\r\nfunction next() {\r\n    bgService\r\n        .next()\r\n        .then(p => {\r\n            const preload = new Image();\r\n            preload.src = p.url;\r\n            preload.onload = _ => refresh(p, m);\r\n        });\r\n}\r\n"]}